install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
View(a)
View(a)
View(a)
View(a)
View(a)
x <- 1
x <- 2
print(x)
print(X) #Al poner mayúscula, que no ha sido definida, me marcará error
#La asignacion puede hacerse tambien de textos
msg <- "Hola"
#Al solicitar una impresion, me debera enseñar el mensaje
print(msg)
x <- #Expresion incompleta
x <- #Expresion incompleta
3
x <- #Expresion incompleta
x
x
print(x)
x <- 1:20
print(x)
y <- 3:9
y
z <- 99:43
z
w <- 3:14.5
w
x <- 1:20
print(x)
z
#Aquí se esta realizando una asignación
x <- 1
#En el caso de trabajar con decimales me genera secuencias hasta los enteros
1L
Inf
exp(-Inf)
1/0
Inf - Inf
Inf + Inf
Inf
attributes(z)
x <- c(TRUE, FALSE, TRUE, TRUE, F, F, T)
x
x <- c(1+1i,2+4i ) #Complex
x <- c("a", "b", "Mundo") #Character
x <- vector("numeric", length = 10)
x
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c(TRUE, 2L)
y <- c(TRUE, 2L, 2)
y <- c(FALSE, 2L, 5, 5+4i)
y
x
x <- list(1, "a", TRUE, 3+2i,5L)
x
1:50
x <- list(1, "a", TRUE, 3+2i,5L, 1:50)
x
#Matrices
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6, 2, 3)
m
#La manera automatica de llenarse fue columna por columna
#Si yo quisiera que se llenara fila por fila seria:
m <- matrix(data = 1:6, nrow = 2, ncol = 3, byrow = TRUE)
m
m <- matrix(1:6, 2, 3,T)
m
m <- 1:10
dim(m)
m <- 1:10
m
dim(m) <- c(2,5)
m
#Otra forma de crear una matriz es uniendo diferentes vectores
x <- 1:3
y <- 10:12
#CBind, unir columnas
cbind(x,y)
rbind(x,y)
x <- factor(c("Si", "Si", "No", "No", "Si"))
x
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"))
x
table(x)
unclass(x)
?factor
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"), levels = c("Rojo", "Amarillo", "Verde", "Naranja"))
x
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"), levels = c("Rojo", "Amarillo", "Verde", "Azul"))
x
unclass(x)
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
#Valores faltantes
x <- c(1, 2, NA, 10, 3)
is.na(x)       #Valor faltante detectado
is.nan(x)      #Valor no numerico que no es faltante
y <- c(1, 2, NaN, 10, 3)
is.na(y)       #Valor faltante detectado
is.nan(y)      #Valor no numerico que no es faltante
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
#Names
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
x <- list(a = 1, b = 2, c = 3)
x
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a","b"), c("c","d"))
m
s <- matrix(c(1,2,3, 4,5,6), nrow=2, ncol=3, byrow = TRUE)
s
t <- matrix(c(3,2,1, 6,5,4), nrow=2, ncol=3, byrow = TRUE)
t
mol <- s*m
mol
q <- 3+5
q
q <- 3*5
q
q <- t+s
q
?read.table
?sapply
y <- data.frame(a=1,b="a")
y
dput(y)
mtcars
y <- data.frame(a = 1, b = "a")
dput(y)
dput(y,file="~/Archivo de prueba.y.R")
dput(y,file="~/Archivo de prueba/y.R")
y2 <- dget(file ="~/Archivo de prueba/y.R")
m <- data.frame(mtcars)
m
dput(m)
m <- data.frame(mtcars)
m
dput(m)
dput(m,file = "~/Archivo de prueba/car.R")
nuevocar <- dget(file = "~/Archivo de prueba/car.R")
yo <- data.frame(nuevocar)
yo
x <- data.frame(mtcars)
x
dput(x)
dput(x, file="~/GitHub/Software_Actuarial_III/Carros.R")
nuevox <- dget(file="~/GitHub/Software_Actuarial_III/Carros.R")
CarrosAgustin <- data.frame(nuevox)
CarrosAgustin
CarrosAgustin
nuevocon <- dget(file="~/GitHub/Software_Actuarial_III/Carros.R")
CarrosAgustín <- data.frame(nuevocon)
CarrosAgustín
#Clase del 7/3/1018
setwd("~/GitHub/Software_Actuarial_III")
#Extraccion de valores faltantes
airquality[1:6,]
complete.cases(airquality[1:6,])
complete.cases(airquality[1:10,])
completos <- complete.cases(airquality)
completos
#Extraccion de valores faltantes
airquality[1:6,]
airquality[completos,]
airquality[completos[1:6,],]
airquality[completos[1:6],]
airquality[1:6,]
completos <- complete.cases(airquality)
data <- airquality[completos,]
data[1:6,]
x <- 1:4; y <- 6:9
x <- 1:4; y <- 6:9
x + y
x > 2
x >= 2
y == 8
x*y
x/y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x
y
x%%y #Para multiplicar matrices
x%*%y #Para multiplicar matrices
y%*%x #No hay conmutatividad en matrices
x == 3
x = 3
x
if (x<5){
si
}else{
no
}
if (x<5){
8
}else{
9
}
if (x<5){
msg <- "si"
msg
}else{
msg <- "no"
msg
}
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "No"
msg
}else if (x = 3){
msg <- "Bien"
msg
}else{
msg <- "No hay nada"
msg
}
x = 3
x
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "No"
msg
}else if (x == 3){
msg <- "Bien"
msg
}else{
msg <- "No hay nada"
msg
}
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "No"
msg
}else if (x <- 3){
msg <- "Bien"
msg
}else{
msg <- "No hay nada"
msg
}
x = FALSE
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "No"
msg
}else if (x <- 3){
msg <- "Bien"
msg
}else{
msg <- "No hay nada"
msg
}
x = "Hola"
x
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "No"
msg
}else if (x <- 3){
msg <- "Bien"
msg
}else{
msg <- "No hay nada"
msg
}
x <- "Hola"
x
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "No"
msg
}else if (x <- 3){
msg <- "Bien"
msg
}else{
msg <- "No hay nada"
msg
}
x = 6
if (x<5){
msg <- "Si, en efecto el numero es menor"
msg
}else{
msg <- "No, el numero es mayor"
msg
}
if (x<5){
msg <- "Si"
msg
}else if (x>5){
msg <- "Menor a 5"
msg
}else if (x <=10){
msg <- "Entre 5 y 10"
msg
}else{
msg <- "Mayor a 10"
msg
}
if (x<5){
msg <- "Menor a 5"
msg
}else if (x <=10){
msg <- "Entre 5 y 10"
msg
}else{
msg <- "Mayor a 10"
msg
}
x = 3
if (x<5){
msg <- "Menor a 5"
msg
}else if (x <=10){
msg <- "Entre 5 y 10"
msg
}else{
msg <- "Mayor a 10"
msg
}
x = 8
if(x>3){
y <- 10
}else{
y <- 0
}
y <- if(x>3){
10
}else{
0
}
if(x>3){
y <- 10
}else{
y <- 0
}
y
y <- if(x>3){
10
}else{
0
}
y
x = 2
if(x>3){
y <- 10
}else{
y <- 0
}
y
y <- if(x>3){
10
}else{
0
}
y
